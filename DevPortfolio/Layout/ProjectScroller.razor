@page "/projectscroller"

<div class="carousel-container">
    <div class="carousel-track" style="transform: translateX(@TranslateX%);">
        @foreach (var (item, index) in ProjectGroups.Select((item, index) => (item, index)))
        {
            var offset = index - CurrentIndex;
            <div class="carousel-item @(GetPositionClass(offset))">
                <img src="@item.ImageUrl" alt="@item.Title" />
                <div class="caption">@item.Title</div>
            </div>
        }
    </div>
</div>

<button class="carousel-btn left" @onclick="Previous">&#10094;</button>
<button class="carousel-btn right" @onclick="Next">&#10095;</button>

@code {
    private List<ProjectGroup> ProjectGroups = new()
    {
        new ProjectGroup { Title = "Blazor", Link = "pages/blazor", ImageUrl = "images/blazor.png" },
        new ProjectGroup { Title = "C# Console", Link = "pages/csharp", ImageUrl = "images/csharp.png" },
        new ProjectGroup { Title = "MAUI", Link = "pages/maui", ImageUrl = "images/maui.png" },
        new ProjectGroup { Title = "MVC", Link = "pages/mvc", ImageUrl = "images/mvc.png" }
    };


    private int CurrentIndex = 0;
    private double TranslateX => -CurrentIndex * 100;

    private void Next()
    {
        CurrentIndex = (CurrentIndex + 1) % ProjectGroups.Count;
    }

    private void Previous()
    {
        CurrentIndex = (CurrentIndex - 1 + ProjectGroups.Count) % ProjectGroups.Count;
    }

    private string GetPositionClass(int offset)
    {
        return offset switch
        {
            0 => "center",
            -1 or 1 => "side",
            _ => "hidden"
        };
    }

    private class ProjectItem
    {
        public string Title { get; set; } = "";
        public string ImageUrl { get; set; } = "";
    }

    // Auto-rotate every few seconds
    protected override void OnInitialized()
    {
        var timer = new System.Timers.Timer(4000);
        timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
            {
                Next();
                StateHasChanged();
            });
        };
        timer.Start();
    }
}
